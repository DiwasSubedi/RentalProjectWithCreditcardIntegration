<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- enable Method level [vs URL level] authorization This work for ROOT 
		WEB APPLICATION Level scanned components Does NOT recognize WEB Application 
		level components - for THAT need to place enable line in Dispatcher-servlet -->
	<security:global-method-security		pre-post-annotations="enabled">
		<security:expression-handler ref="expressionHandler" />
	</security:global-method-security>
	<bean id="expressionHandler"
		class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<property name="permissionEvaluator" ref="permissionEvaluator" />
	</bean>
	<bean id="permissionEvaluator"
		class="com.himaliyanGeeks.carRental.security.CarPermissionEvaluator" />


	<!-- security:http enables security filter mechanism...name space configuration 
		is activated -->
	<!-- use-expressions enables URL level authorization - allows SPEL syntax -->
	<security:http use-expressions="true">


		<!-- if non-standard ports for HTTP and/or HTTPS, you can specify them 
			here -->
		<!-- <security:port-mappings> <security:port-mapping http="9080" https="9443"/> 
			</security:port-mappings> -->
		<!-- We will just use web.xml error for access-denied -->
		<!-- Other Options to redirect exception for web authorization -->
		<!-- <security:access-denied-handler error-page="/error-forbidden" /> <security:access-denied-handler 
			ref="controllerExceptionHandler" /> -->

		<!-- Implemented with Web based URL - Controller "METHOD" level authorization -->
		<!-- the more specific rules need to come first, followed by the more general 
			ones. -->
		<!-- COMMENT out the following to see @Service METHOD level authorization -->
		<security:intercept-url pattern="/adminHome" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/home"	access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		<security:intercept-url pattern="/"	access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		<security:form-login login-page="/login"
			login-processing-url="/postLogin" username-parameter="username"
			password-parameter="password" default-target-url="/welcome"
			always-use-default-target="true" authentication-failure-url="/loginfailed" />

		<security:logout logout-success-url="/logout"
			delete-cookies="JSESSIONID" logout-url="/doLogout" />

		<!-- remember me -->
		<!-- <security:remember-me data-source-ref="dataSource" token-validity-seconds="86400" 
			remember-me-parameter="keepMe"/> -->
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider
			user-service-ref="customUserDetailsService">
			<security:password-encoder hash="md5" />
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" 
		id="passwordEncoder"/> -->
	<bean id="customUserDetailsService"
		class="com.himalayanGeeks.carRental.serviceImpl.CustomUserDetailsService" />



	
</beans>
